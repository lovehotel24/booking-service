// Package routers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package routers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/lovehotel24/booking-service/pkg/models"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BookId defines model for BookId.
type BookId struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// Booking defines model for Booking.
type Booking = models.Booking

// Error Object representing an error
type Error struct {
	// Code Error code that identify of the error
	Code *int32 `json:"code,omitempty"`

	// Message Short description of the error
	Message *string `json:"message,omitempty"`
}

// GetAllBookingParams defines parameters for GetAllBooking.
type GetAllBookingParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateBookingParams defines parameters for CreateBooking.
type CreateBookingParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateBookingJSONRequestBody defines body for CreateBooking for application/json ContentType.
type CreateBookingJSONRequestBody = Booking

// UpdateBookingByIdJSONRequestBody defines body for UpdateBookingById for application/json ContentType.
type UpdateBookingByIdJSONRequestBody = Booking

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get All Booking
	// (GET /v1/booking)
	GetAllBooking(c *fiber.Ctx, params GetAllBookingParams) error
	// Create Booking
	// (POST /v1/booking)
	CreateBooking(c *fiber.Ctx, params CreateBookingParams) error
	// Get Booking by UserId
	// (GET /v1/booking/user/{UserId})
	GetBookingByUserId(c *fiber.Ctx, userId string) error
	// Delete Booking By Booking Id
	// (DELETE /v1/booking/{BookId})
	DeleteBookingById(c *fiber.Ctx, bookId string) error
	// Get Booking by Booking Id
	// (GET /v1/booking/{BookId})
	GetBookingById(c *fiber.Ctx, bookId string) error
	// Update Booking By Booking Id
	// (PUT /v1/booking/{BookId})
	UpdateBookingById(c *fiber.Ctx, bookId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAllBooking operation middleware
func (siw *ServerInterfaceWrapper) GetAllBooking(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllBookingParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetAllBooking(c, params)
}

// CreateBooking operation middleware
func (siw *ServerInterfaceWrapper) CreateBooking(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBookingParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.CreateBooking(c, params)
}

// GetBookingByUserId operation middleware
func (siw *ServerInterfaceWrapper) GetBookingByUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "UserId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "UserId", c.Params("UserId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter UserId: %w", err).Error())
	}

	return siw.Handler.GetBookingByUserId(c, userId)
}

// DeleteBookingById operation middleware
func (siw *ServerInterfaceWrapper) DeleteBookingById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "BookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "BookId", c.Params("BookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter BookId: %w", err).Error())
	}

	return siw.Handler.DeleteBookingById(c, bookId)
}

// GetBookingById operation middleware
func (siw *ServerInterfaceWrapper) GetBookingById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "BookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "BookId", c.Params("BookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter BookId: %w", err).Error())
	}

	return siw.Handler.GetBookingById(c, bookId)
}

// UpdateBookingById operation middleware
func (siw *ServerInterfaceWrapper) UpdateBookingById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "BookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithOptions("simple", "BookId", c.Params("BookId"), &bookId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter BookId: %w", err).Error())
	}

	return siw.Handler.UpdateBookingById(c, bookId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/v1/booking", wrapper.GetAllBooking)

	router.Post(options.BaseURL+"/v1/booking", wrapper.CreateBooking)

	router.Get(options.BaseURL+"/v1/booking/user/:UserId", wrapper.GetBookingByUserId)

	router.Delete(options.BaseURL+"/v1/booking/:BookId", wrapper.DeleteBookingById)

	router.Get(options.BaseURL+"/v1/booking/:BookId", wrapper.GetBookingById)

	router.Put(options.BaseURL+"/v1/booking/:BookId", wrapper.UpdateBookingById)

}

type GetAllBookingRequestObject struct {
	Params GetAllBookingParams
}

type GetAllBookingResponseObject interface {
	VisitGetAllBookingResponse(ctx *fiber.Ctx) error
}

type GetAllBooking200JSONResponse []Booking

func (response GetAllBooking200JSONResponse) VisitGetAllBookingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAllBookingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllBookingdefaultJSONResponse) VisitGetAllBookingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type CreateBookingRequestObject struct {
	Params CreateBookingParams
	Body   *CreateBookingJSONRequestBody
}

type CreateBookingResponseObject interface {
	VisitCreateBookingResponse(ctx *fiber.Ctx) error
}

type CreateBooking200JSONResponse BookId

func (response CreateBooking200JSONResponse) VisitCreateBookingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateBookingdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateBookingdefaultJSONResponse) VisitCreateBookingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GetBookingByUserIdRequestObject struct {
	UserId string `json:"UserId"`
}

type GetBookingByUserIdResponseObject interface {
	VisitGetBookingByUserIdResponse(ctx *fiber.Ctx) error
}

type GetBookingByUserId200JSONResponse []Booking

func (response GetBookingByUserId200JSONResponse) VisitGetBookingByUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetBookingByUserIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetBookingByUserIddefaultJSONResponse) VisitGetBookingByUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type DeleteBookingByIdRequestObject struct {
	BookId string `json:"BookId"`
}

type DeleteBookingByIdResponseObject interface {
	VisitDeleteBookingByIdResponse(ctx *fiber.Ctx) error
}

type DeleteBookingById204Response struct {
}

func (response DeleteBookingById204Response) VisitDeleteBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteBookingByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteBookingByIddefaultJSONResponse) VisitDeleteBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GetBookingByIdRequestObject struct {
	BookId string `json:"BookId"`
}

type GetBookingByIdResponseObject interface {
	VisitGetBookingByIdResponse(ctx *fiber.Ctx) error
}

type GetBookingById200JSONResponse Booking

func (response GetBookingById200JSONResponse) VisitGetBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetBookingByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetBookingByIddefaultJSONResponse) VisitGetBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UpdateBookingByIdRequestObject struct {
	BookId string `json:"BookId"`
	Body   *UpdateBookingByIdJSONRequestBody
}

type UpdateBookingByIdResponseObject interface {
	VisitUpdateBookingByIdResponse(ctx *fiber.Ctx) error
}

type UpdateBookingById200JSONResponse BookId

func (response UpdateBookingById200JSONResponse) VisitUpdateBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateBookingByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateBookingByIddefaultJSONResponse) VisitUpdateBookingByIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get All Booking
	// (GET /v1/booking)
	GetAllBooking(ctx context.Context, request GetAllBookingRequestObject) (GetAllBookingResponseObject, error)
	// Create Booking
	// (POST /v1/booking)
	CreateBooking(ctx context.Context, request CreateBookingRequestObject) (CreateBookingResponseObject, error)
	// Get Booking by UserId
	// (GET /v1/booking/user/{UserId})
	GetBookingByUserId(ctx context.Context, request GetBookingByUserIdRequestObject) (GetBookingByUserIdResponseObject, error)
	// Delete Booking By Booking Id
	// (DELETE /v1/booking/{BookId})
	DeleteBookingById(ctx context.Context, request DeleteBookingByIdRequestObject) (DeleteBookingByIdResponseObject, error)
	// Get Booking by Booking Id
	// (GET /v1/booking/{BookId})
	GetBookingById(ctx context.Context, request GetBookingByIdRequestObject) (GetBookingByIdResponseObject, error)
	// Update Booking By Booking Id
	// (PUT /v1/booking/{BookId})
	UpdateBookingById(ctx context.Context, request UpdateBookingByIdRequestObject) (UpdateBookingByIdResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllBooking operation middleware
func (sh *strictHandler) GetAllBooking(ctx *fiber.Ctx, params GetAllBookingParams) error {
	var request GetAllBookingRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllBooking(ctx.UserContext(), request.(GetAllBookingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllBooking")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAllBookingResponseObject); ok {
		if err := validResponse.VisitGetAllBookingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateBooking operation middleware
func (sh *strictHandler) CreateBooking(ctx *fiber.Ctx, params CreateBookingParams) error {
	var request CreateBookingRequestObject

	request.Params = params

	var body CreateBookingJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBooking(ctx.UserContext(), request.(CreateBookingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBooking")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateBookingResponseObject); ok {
		if err := validResponse.VisitCreateBookingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetBookingByUserId operation middleware
func (sh *strictHandler) GetBookingByUserId(ctx *fiber.Ctx, userId string) error {
	var request GetBookingByUserIdRequestObject

	request.UserId = userId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetBookingByUserId(ctx.UserContext(), request.(GetBookingByUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBookingByUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetBookingByUserIdResponseObject); ok {
		if err := validResponse.VisitGetBookingByUserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteBookingById operation middleware
func (sh *strictHandler) DeleteBookingById(ctx *fiber.Ctx, bookId string) error {
	var request DeleteBookingByIdRequestObject

	request.BookId = bookId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBookingById(ctx.UserContext(), request.(DeleteBookingByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBookingById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteBookingByIdResponseObject); ok {
		if err := validResponse.VisitDeleteBookingByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetBookingById operation middleware
func (sh *strictHandler) GetBookingById(ctx *fiber.Ctx, bookId string) error {
	var request GetBookingByIdRequestObject

	request.BookId = bookId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetBookingById(ctx.UserContext(), request.(GetBookingByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBookingById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetBookingByIdResponseObject); ok {
		if err := validResponse.VisitGetBookingByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateBookingById operation middleware
func (sh *strictHandler) UpdateBookingById(ctx *fiber.Ctx, bookId string) error {
	var request UpdateBookingByIdRequestObject

	request.BookId = bookId

	var body UpdateBookingByIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateBookingById(ctx.UserContext(), request.(UpdateBookingByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateBookingById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateBookingByIdResponseObject); ok {
		if err := validResponse.VisitUpdateBookingByIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bNhD9KwTbo2xpvW6w0S2bBKnRAjlscir2QEkjizHF4ZIjI8LC/70gafnbu94m",
	"KJoiN3k4nBnOe2/Gj7zE1qAGTY7nj9yVDbQifN4iLmaV/zIWDViSEOwy2Gq0rSCe866TFU849QZ4zh1Z",
	"qed8tdpYsPgCJfFVEgL6w6OIBeLiva7eCYK90JU3HIVOgv8dCUsX3ygbKBcz/Um2+/7kDef8P3Z08YWL",
	"mpJwI/oWNN2RoC48fe1RICoQ2rtYxHZ2WbTOgZ39IzQS/nU0x9Ha2GIFyo0HfHYOR7I1aMmn0MK3gm+d",
	"jKCG53wuqemKcYltqnAJDRKoyTQtot/IgV3KElKzmKcxTyjnvbVofdgKXGmlIYma5/xjKI9ZMBYcaJJ6",
	"zoRmELyTA9qUWMFxiBCZ+TNGjSAmKx+n7hnWjBrYxIKvojXKP+kqyzKebHsoNV1Ptk2UmmAO1je8BefE",
	"/ETSuwYtsR3b+WxvsVMV00jMgPU5gx8Jt7hERd4kdY3HJayBYeuGsxot+xOXwH6PiPjoktQ+hkuwLl6/",
	"GmfjzL8RDWhhJM/59TgbX6+BDg1Pl1cDrv7nHAIxPCTCF+GpyD8AvVFqm8GCM6hdRGySZRE4TaDDZWGM",
	"kmW4nn5xvpJhBoVRQ9CGi79aqHnOf0m30ypdj6p0yLVtlrBW9LFXB/T6gwdbLTpFL6rkqQIil0+k+wAa",
	"rCwjCdjQiQCr69pW2D42jL1Riu08wwgrWiCwjud/HeL8qQGmu7YA6zkWOsQImVtIwwqo0QJzfjZ6LhCy",
	"EpXykvIks+D8uz2DeM4fOrA9TwZhY1078IfbRx8KYJWcL8btVWOBOqvPZFKylc8kuk+4QXeCXm8tCIJd",
	"ej104OgWq/674blBIkD6TQR+Ls2s+lFoGhu/Zekq2R0HqV9F6ePnsJBWTw2HdYDbPvr+nBCXTYhhuhc9",
	"Wzfukjkhq2EP+Ut7awiuymJyXWWjV2UBo6mYvB4Vv928GhW1mE6mRfn6uq4G/YZNv5HvDnAPnbRQ8Zxs",
	"Byf0vFlj9wdseYzcX8UtpiD+i9vnyrtg39DlFFWm57dgjFrttPRfRHW/iKfBjc/c4Hvbbz4jxs/q6Ns1",
	"dOEs/AGlst/KF8il2CyY76GY9aR/kWISbroTyH82lThWxf9wB3o8uvDYakDDiyMi+d8iXcTknISDL9jl",
	"QLvOKp7zhsi4PE0VlkI16Ci/yW6u+Op+9XcAAAD//2uj0KySDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
